[
  {
    "name": "TI Drivers",
    "mainCategories": [
      [
        "Documents"
      ],
      [
        "Examples",
        "Development Tools"
      ]
    ],
    "subCategories": [],
    "devtools": [
        "MSP-EXP432E401Y"
    ],
    "resourceType": "categoryInfo",
    "description": "<p>The TI Drivers API exposes the functionality of the hardware-specific drivers in the same way across all TI SimpleLink devices, giving developers portable, feature-rich access to a variety of peripherals. TI Drivers are open source [Berkeley Software Distribution license (BSD)] and built on the hardware abstraction layer, offering full access to the device’s complete capability. This device-agnostic approach provides easy portability of the application code across SimpleLink devices now and into the future. Other peripherals exposed through these intuitive and consistent TI driver APIs include analog-to-digital converter (ADC), SPI, PWM and GPIO, among many others. With full access to the hardware abstraction layer through the TI Drivers, developers can further optimize their applications by leveraging the Hardware Abstraction Layer (HAL) or directly accessing the microcontroller with register-level programming. TI Drivers allow customers to make the application exactly what it needs to be.</p>"
  },
  {
    "name": "TI-RTOS Kernel (SYS_BIOS)",
    "mainCategories": [
      [
        "Documents"
      ],
      [
        "Examples",
        "Development Tools"
      ]
    ],
    "subCategories": [],
    "devtools": [
        "MSP-EXP432E401Y"
    ],
    "resourceType": "categoryInfo",
    "description": "<p>TI-RTOS Kernel is also known as SYS_BIOS. SYS_BIOS is a scalable real-time kernel that is designed for applications that require real-time scheduling and synchronization or real-time instrumentation. SYS_BIOS provides preemptive multi-threading, hardware abstraction, real-time analysis, and configuration tools. SYS_BIOS helps minimize memory and CPU requirements on the target.</p>"
  },
  {
    "name": "Instrumentation",
    "mainCategories": [
      [
        "Documents"
      ],
      [
        "Examples",
        "Development Tools"
      ]
    ],
    "subCategories": [],
    "devtools": [
        "MSP-EXP432E401Y"
    ],
    "resourceType": "categoryInfo",
    "description": "<p>The Unified Instrumentation Architecture (UIA) defines a set of tools, APIs, transports, interfaces and guidelines that enable developers to instrument embedded software in a way that is portable and flexible, and enables the creation of advanced tooling features that can be used both in the lab and in the field.</p>"
  },
  {
    "name": "Network Services",
    "mainCategories": [
      [
        "Documents"
      ],
      [
        "Examples",
        "Development Tools"
      ]
    ],
    "subCategories": [],
    "devtools": [
        "MSP-EXP432E401Y"
    ],
    "resourceType": "categoryInfo",
    "description": "<p>The Network Services (NS) Component provides a set of cross-platform libraries that provide common services related to networking.</p><p>At its core is the SlNetSock library that insulates users from the differences between network stacks. For example, users can call SlNetSock_socket() to create a network socket, and that will work whether your network stack is the MSP432E4’s NDK, the CC3220’s WiFi driver, a Linux-based network stack, or some other.</p>"
  },
  {
    "name": "Network Developer's Kit",
    "mainCategories": [
      [
        "Documents"
      ],
      [
        "Examples",
        "Development Tools"
      ]
    ],
    "subCategories": [],
    "devtools": [
        "MSP-EXP432E401Y"
    ],
    "resourceType": "categoryInfo",
    "description": "<p>The Network Developer's Kit (NDK) is a platform for development and demonstration of network enabled applications on TI embedded processors. The code included in this NDK release is generic C code which runs on a variety of TI devices.</p><p>Within the SimpleLink SDK, the Network Services SlNetSock module configures the NDK as the network stack for wired Ethernet communications.</p><p>The NDK stack serves as a rapid prototyping platform for the development of network and packet processing applications. It can be used to add network connectivity to existing applications for communications, configuration, and control. Using the components provided in the NDK, developers can quickly move from development concepts to working implementations attached to the network.</p>"
  }
]
