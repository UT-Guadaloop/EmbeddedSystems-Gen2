<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="_c_a_n_8h" kind="file" language="C++">
    <compoundname>CAN.h</compoundname>
    <includes local="no">stddef.h</includes>
    <includes local="no">stdint.h</includes>
    <includes refid="source_2ti_2drivers_2can_2types_8h" local="no">ti/drivers/can/types.h</includes>
    <includedby refid="_c_a_n_m_s_p432_e4_8h" local="no">CANMSP432E4.h</includedby>
    <incdepgraph>
      <node id="125">
        <label>stdint.h</label>
      </node>
      <node id="124">
        <label>stddef.h</label>
      </node>
      <node id="123">
        <label>CAN.h</label>
        <link refid="_c_a_n_8h"/>
        <childnode refid="124" relation="include">
        </childnode>
        <childnode refid="125" relation="include">
        </childnode>
        <childnode refid="126" relation="include">
        </childnode>
      </node>
      <node id="126">
        <label>ti/drivers/can/types.h</label>
        <link refid="source_2ti_2drivers_2can_2types_8h"/>
        <childnode refid="124" relation="include">
        </childnode>
        <childnode refid="125" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="128">
        <label>CANMSP432E4.h</label>
        <link refid="_c_a_n_m_s_p432_e4_8h"/>
      </node>
      <node id="127">
        <label>CAN.h</label>
        <link refid="_c_a_n_8h"/>
        <childnode refid="128" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_c_a_n___params" prot="public">CAN_Params</innerclass>
    <innerclass refid="struct_c_a_n___fxn_table" prot="public">CAN_FxnTable</innerclass>
    <innerclass refid="struct_c_a_n___config__" prot="public">CAN_Config_</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group___c_a_n___c_o_n_t_r_o_l_1gad3aec7d0ff50fa7ecd46f41c46b1dd4b" prot="public" static="no">
        <name>CAN_CMD_RESERVED</name>
        <initializer>(32)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Common CAN_control command code reservation offset. CAN driver implementations should offset command codes with CAN_CMD_RESERVED growing positively</para><para>Example implementation specific command codes: <programlisting><codeline><highlight class="normal">#define<sp/>CANXYZ_CMD_COMMAND0<sp/><sp/><sp/><sp/><sp/>CAN_CMD_RESERVED<sp/>+<sp/>0</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>CANXYZ_CMD_COMMAND1<sp/><sp/><sp/><sp/><sp/>CAN_CMD_RESERVED<sp/>+<sp/>1</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432e4/source/ti/drivers/CAN.h" line="252" column="9" bodyfile="exports/tidrivers_msp432e4/source/ti/drivers/CAN.h" bodystart="252" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___c_a_n___c_o_n_t_r_o_l_1ga03ae91524e3e059c0b1f2ba091ed0794" prot="public" static="no">
        <name>CAN_STATUS_RESERVED</name>
        <initializer>(-32)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Common CAN_control status code reservation offset. CAN driver implementations should offset status codes with CAN_STATUS_RESERVED growing negatively.</para><para>Example implementation specific status codes: <programlisting><codeline><highlight class="normal">#define<sp/>CANXYZ_STATUS_ERROR0<sp/><sp/><sp/><sp/>CAN_STATUS_RESERVED<sp/>-<sp/>0</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>CANXYZ_STATUS_ERROR1<sp/><sp/><sp/><sp/>CAN_STATUS_RESERVED<sp/>-<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>CANXYZ_STATUS_ERROR2<sp/><sp/><sp/><sp/>CAN_STATUS_RESERVED<sp/>-<sp/>2</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432e4/source/ti/drivers/CAN.h" line="266" column="9" bodyfile="exports/tidrivers_msp432e4/source/ti/drivers/CAN.h" bodystart="266" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___c_a_n___s_t_a_t_u_s_1gaec519b2472a0cb3c778a1e2cffd7de5d" prot="public" static="no">
        <name>CAN_STATUS_SUCCESS</name>
        <initializer>(0)</initializer>
        <briefdescription>
<para>Successful status code returned by <ref refid="_c_a_n_8h_1a16c50386c49aa57fb2576a89ffa22a6b" kindref="member">CAN_control()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="_c_a_n_8h_1a16c50386c49aa57fb2576a89ffa22a6b" kindref="member">CAN_control()</ref> returns CAN_STATUS_SUCCESS if the control code was executed successfully. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432e4/source/ti/drivers/CAN.h" line="281" column="9" bodyfile="exports/tidrivers_msp432e4/source/ti/drivers/CAN.h" bodystart="281" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___c_a_n___s_t_a_t_u_s_1gaf97bc85f9b1ce1bd427ab76347994217" prot="public" static="no">
        <name>CAN_STATUS_ERROR</name>
        <initializer>(-1)</initializer>
        <briefdescription>
<para>Generic error status code returned by <ref refid="_c_a_n_8h_1a16c50386c49aa57fb2576a89ffa22a6b" kindref="member">CAN_control()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="_c_a_n_8h_1a16c50386c49aa57fb2576a89ffa22a6b" kindref="member">CAN_control()</ref> returns CAN_STATUS_ERROR if the control code was not executed successfully. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432e4/source/ti/drivers/CAN.h" line="289" column="9" bodyfile="exports/tidrivers_msp432e4/source/ti/drivers/CAN.h" bodystart="289" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___c_a_n___s_t_a_t_u_s_1ga4b40d390fb347ceb930b54982e62e8c3" prot="public" static="no">
        <name>CAN_STATUS_UNDEFINEDCMD</name>
        <initializer>(-2)</initializer>
        <briefdescription>
<para>An error status code returned by <ref refid="_c_a_n_8h_1a16c50386c49aa57fb2576a89ffa22a6b" kindref="member">CAN_control()</ref> for undefined command codes. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="_c_a_n_8h_1a16c50386c49aa57fb2576a89ffa22a6b" kindref="member">CAN_control()</ref> returns CAN_STATUS_UNDEFINEDCMD if the control code is not recognized by the driver implementation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432e4/source/ti/drivers/CAN.h" line="298" column="9" bodyfile="exports/tidrivers_msp432e4/source/ti/drivers/CAN.h" bodystart="298" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_c_a_n_8h_1a9a7efefe615409e714f165d1fdcf00ae" prot="public" static="no">
        <name>CAN_WAIT_FOREVER</name>
        <initializer>(~(0U))</initializer>
        <briefdescription>
<para>Wait forever define. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432e4/source/ti/drivers/CAN.h" line="305" column="10" bodyfile="exports/tidrivers_msp432e4/source/ti/drivers/CAN.h" bodystart="305" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="_c_a_n_8h_1a4d6db79b5847128a849ac24b3c281960" prot="public" static="no">
        <name>CAN_Mode</name>
        <enumvalue id="_c_a_n_8h_1a4d6db79b5847128a849ac24b3c281960a6298c2511f40500c7124649998f4d3d6" prot="public">
          <name>CAN_MODE_BLOCKING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Blocking and will return only when at least one CAN frame has been processed by <ref refid="_c_a_n_8h_1afe89a00428e47854c9881b4998f2464b" kindref="member">CAN_write()</ref> or <ref refid="_c_a_n_8h_1a24ffdf96e912ae6218ec3d3f52549551" kindref="member">CAN_read()</ref> data, or if the optional timeout occurs. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_c_a_n_8h_1a4d6db79b5847128a849ac24b3c281960ac8985ce218669592d8b94f1c796113e1" prot="public">
          <name>CAN_MODE_NONBLOCKING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Non-blocking and will return immediately with or without write or read data. Error flags could be thrown if invalid <ref refid="_c_a_n_8h_1afe89a00428e47854c9881b4998f2464b" kindref="member">CAN_write()</ref> or <ref refid="_c_a_n_8h_1a24ffdf96e912ae6218ec3d3f52549551" kindref="member">CAN_read()</ref>. </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>CAN mode settings. </para>        </briefdescription>
        <detaileddescription>
<para>This enum defines the read, write, and blocking modes for the configured CAN. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432e4/source/ti/drivers/CAN.h" line="318" column="1" bodyfile="exports/tidrivers_msp432e4/source/ti/drivers/CAN.h" bodystart="318" bodyend="331"/>
      </memberdef>
      <memberdef kind="enum" id="_c_a_n_8h_1a34e5130739e2ad4bdf3cbf3eccbdf83f" prot="public" static="no">
        <name>CAN_Direction</name>
        <enumvalue id="_c_a_n_8h_1a34e5130739e2ad4bdf3cbf3eccbdf83fa41cd246c9c2837823376b22096157c7c" prot="public">
          <name>CAN_DIRECTION_READ</name>
          <initializer>= 0x1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Read only mode, a transmit object is not used </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_c_a_n_8h_1a34e5130739e2ad4bdf3cbf3eccbdf83fa62f442390bb202f9314368dbafc54adf" prot="public">
          <name>CAN_DIRECTION_WRITE</name>
          <initializer>= 0x2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Write only mode, a receive object is not used </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_c_a_n_8h_1a34e5130739e2ad4bdf3cbf3eccbdf83fadb0f0d4c55d5e35112c2cba7aa697738" prot="public">
          <name>CAN_DIRECTION_READWRITE</name>
          <initializer>= 0x3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Read and write mode. A single transmit object is used and at least one receive object is used. NOTE: enum value must be logical OR of CAN_DIRECTION_READ and CAN_DIRECTION_WRITE </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>CAN communication mode. </para>        </briefdescription>
        <detaileddescription>
<para>This enum defines read or write communication direction for the configured CAN. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432e4/source/ti/drivers/CAN.h" line="339" column="1" bodyfile="exports/tidrivers_msp432e4/source/ti/drivers/CAN.h" bodystart="339" bodyend="349"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_c_a_n_8h_1a04c6849a36f49970a418d45e72c9b516" prot="public" static="no">
        <type>struct <ref refid="struct_c_a_n___config__" kindref="compound">CAN_Config_</ref> *</type>
        <definition>typedef struct CAN_Config_* CAN_Handle</definition>
        <argsstring></argsstring>
        <name>CAN_Handle</name>
        <briefdescription>
<para>A handle that is returned from a <ref refid="_c_a_n_8h_1ac007ed113727f16540e8b8e5d4e88fe4" kindref="member">CAN_open()</ref> call. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432e4/source/ti/drivers/CAN.h" line="310" column="1" bodyfile="exports/tidrivers_msp432e4/source/ti/drivers/CAN.h" bodystart="310" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_c_a_n_8h_1ae64d35abf30084ae3b17d47f1c3e2a17" prot="public" static="no">
        <type>struct <ref refid="structcan__frame" kindref="compound">can_frame</ref></type>
        <definition>typedef struct can_frame CAN_Frame</definition>
        <argsstring></argsstring>
        <name>CAN_Frame</name>
        <briefdescription>
<para>CAN frame structure. </para>        </briefdescription>
        <detaileddescription>
<para>The structure that makes up a CAN message. The unions are provided in order for there to be structural naming compatibility with SocketCAN while at the same time providing an alternative easier to use naming convention. We diverge a bit with TI structural naming convention of the struct in order to provide an option to be compatible with SocketCAN conventions.</para><para><simplesect kind="see"><para><ref refid="_c_a_n_8h_1afe89a00428e47854c9881b4998f2464b" kindref="member">CAN_write()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="_c_a_n_8h_1a24ffdf96e912ae6218ec3d3f52549551" kindref="member">CAN_read()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432e4/source/ti/drivers/CAN.h" line="310" column="1" bodyfile="exports/tidrivers_msp432e4/source/ti/drivers/CAN.h" bodystart="380" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_c_a_n_8h_1acc8897d6cde8780b2ea1c6ded3f1f549" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* CAN_CloseFxn) (CAN_Handle handle)</definition>
        <argsstring>)(CAN_Handle handle)</argsstring>
        <name>CAN_CloseFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_c_a_n_8h_1acc8897d6cde8780b2ea1c6ded3f1f549" kindref="member">CAN_CloseFxn()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432e4/source/ti/drivers/CAN.h" line="386" column="1" bodyfile="exports/tidrivers_msp432e4/source/ti/drivers/CAN.h" bodystart="386" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_c_a_n_8h_1ad949f7ebd426255b83a5abd990a609c0" prot="public" static="no">
        <type>int_fast16_t(*</type>
        <definition>typedef int_fast16_t(* CAN_ControlFxn) (CAN_Handle handle, uint_fast16_t cmd, void *arg)</definition>
        <argsstring>)(CAN_Handle handle, uint_fast16_t cmd, void *arg)</argsstring>
        <name>CAN_ControlFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_c_a_n_8h_1ad949f7ebd426255b83a5abd990a609c0" kindref="member">CAN_ControlFxn()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432e4/source/ti/drivers/CAN.h" line="392" column="1" bodyfile="exports/tidrivers_msp432e4/source/ti/drivers/CAN.h" bodystart="392" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_c_a_n_8h_1a6f6668a04da1b06d98709be9a2426cc7" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* CAN_InitFxn) (CAN_Handle handle)</definition>
        <argsstring>)(CAN_Handle handle)</argsstring>
        <name>CAN_InitFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_c_a_n_8h_1a6f6668a04da1b06d98709be9a2426cc7" kindref="member">CAN_InitFxn()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432e4/source/ti/drivers/CAN.h" line="398" column="1" bodyfile="exports/tidrivers_msp432e4/source/ti/drivers/CAN.h" bodystart="398" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_c_a_n_8h_1a51b71b8ad224e01470b5c9ee34b3f95e" prot="public" static="no">
        <type><ref refid="_c_a_n_8h_1a04c6849a36f49970a418d45e72c9b516" kindref="member">CAN_Handle</ref>(*</type>
        <definition>typedef CAN_Handle(* CAN_OpenFxn) (CAN_Handle handle, CAN_Params *params)</definition>
        <argsstring>)(CAN_Handle handle, CAN_Params *params)</argsstring>
        <name>CAN_OpenFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_c_a_n_8h_1a51b71b8ad224e01470b5c9ee34b3f95e" kindref="member">CAN_OpenFxn()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432e4/source/ti/drivers/CAN.h" line="404" column="1" bodyfile="exports/tidrivers_msp432e4/source/ti/drivers/CAN.h" bodystart="404" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_c_a_n_8h_1aee976ab0f943a5efa7d15e70906b11d1" prot="public" static="no">
        <type>int_fast32_t(*</type>
        <definition>typedef int_fast32_t(* CAN_ReadFxn) (CAN_Handle handle, void *buffer, size_t size)</definition>
        <argsstring>)(CAN_Handle handle, void *buffer, size_t size)</argsstring>
        <name>CAN_ReadFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_c_a_n_8h_1aee976ab0f943a5efa7d15e70906b11d1" kindref="member">CAN_ReadFxn()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432e4/source/ti/drivers/CAN.h" line="410" column="1" bodyfile="exports/tidrivers_msp432e4/source/ti/drivers/CAN.h" bodystart="410" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_c_a_n_8h_1a37e1f018c6ee8289264e184cac3b6f32" prot="public" static="no">
        <type>int_fast32_t(*</type>
        <definition>typedef int_fast32_t(* CAN_WriteFxn) (CAN_Handle handle, const void *buffer, size_t size)</definition>
        <argsstring>)(CAN_Handle handle, const void *buffer, size_t size)</argsstring>
        <name>CAN_WriteFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_c_a_n_8h_1a37e1f018c6ee8289264e184cac3b6f32" kindref="member">CAN_WriteFxn()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432e4/source/ti/drivers/CAN.h" line="417" column="1" bodyfile="exports/tidrivers_msp432e4/source/ti/drivers/CAN.h" bodystart="417" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_c_a_n_8h_1a191c1d511cada1b1d82c634c6859666b" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* CAN_TxMsgFxn) (CAN_Handle handle)</definition>
        <argsstring>)(CAN_Handle handle)</argsstring>
        <name>CAN_TxMsgFxn</name>
        <briefdescription>
<para>A function pointer to a driver specific implementation of <ref refid="_c_a_n_8h_1a191c1d511cada1b1d82c634c6859666b" kindref="member">CAN_TxMsgFxn()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432e4/source/ti/drivers/CAN.h" line="424" column="1" bodyfile="exports/tidrivers_msp432e4/source/ti/drivers/CAN.h" bodystart="424" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_c_a_n_8h_1a2adcb3cde9a6e999f9434e4689a917b9" prot="public" static="no">
        <type>struct <ref refid="struct_c_a_n___config__" kindref="compound">CAN_Config_</ref></type>
        <definition>typedef struct CAN_Config_  CAN_Config</definition>
        <argsstring></argsstring>
        <name>CAN_Config</name>
        <briefdescription>
<para>CAN Global configuration. </para>        </briefdescription>
        <detaileddescription>
<para>The CAN_Config structure contains a set of pointers used to characterize the CAN driver implementation.</para><para>This structure needs to be defined before calling <ref refid="_c_a_n_8h_1ace7de72cc97ae2a35d63c3a4a4772a31" kindref="member">CAN_init()</ref> and it must not be changed thereafter.</para><para><simplesect kind="see"><para><ref refid="_c_a_n_8h_1ace7de72cc97ae2a35d63c3a4a4772a31" kindref="member">CAN_init()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432e4/source/ti/drivers/CAN.h" line="486" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_c_a_n_8h_1abfc2ccd7bffde7724a17ab6c7e69f5cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CAN_close</definition>
        <argsstring>(CAN_Handle handle)</argsstring>
        <name>CAN_close</name>
        <param>
          <type><ref refid="_c_a_n_8h_1a04c6849a36f49970a418d45e72c9b516" kindref="member">CAN_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Function to close a CAN peripheral specified by the CAN handle. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="_c_a_n_8h_1ac007ed113727f16540e8b8e5d4e88fe4" kindref="member">CAN_open()</ref> has been called. </para></simplesect>
<simplesect kind="pre"><para>No active <ref refid="_c_a_n_8h_1a24ffdf96e912ae6218ec3d3f52549551" kindref="member">CAN_read()</ref> or <ref refid="_c_a_n_8h_1afe89a00428e47854c9881b4998f2464b" kindref="member">CAN_write()</ref> call.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="_c_a_n_8h_1a04c6849a36f49970a418d45e72c9b516" kindref="member">CAN_Handle</ref> returned from <ref refid="_c_a_n_8h_1ac007ed113727f16540e8b8e5d4e88fe4" kindref="member">CAN_open()</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_c_a_n_8h_1ac007ed113727f16540e8b8e5d4e88fe4" kindref="member">CAN_open()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432e4/source/ti/drivers/CAN.h" line="498" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_c_a_n_8h_1ace7de72cc97ae2a35d63c3a4a4772a31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CAN_init</definition>
        <argsstring>(void)</argsstring>
        <name>CAN_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function to initialize the CAN module. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>The CAN_config structure must exist and be persistent before this function can be called. This function must also be called before any other CAN driver APIs. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432e4/source/ti/drivers/CAN.h" line="507" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_c_a_n_8h_1a16c50386c49aa57fb2576a89ffa22a6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t CAN_control</definition>
        <argsstring>(CAN_Handle handle, uint_fast16_t cmd, void *arg)</argsstring>
        <name>CAN_control</name>
        <param>
          <type><ref refid="_c_a_n_8h_1a04c6849a36f49970a418d45e72c9b516" kindref="member">CAN_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint_fast16_t</type>
          <declname>cmd</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>Function performs implementation specific features on a given <ref refid="_c_a_n_8h_1a04c6849a36f49970a418d45e72c9b516" kindref="member">CAN_Handle</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Commands for CAN_control() can originate from <ref refid="_c_a_n_8h" kindref="compound">CAN.h</ref> or from implementation specific CAN*.h (<emphasis>CANTCAN2550.h</emphasis>, <emphasis>CANMSP432.h</emphasis>, etc.. ) files. While commands from <ref refid="_c_a_n_8h" kindref="compound">CAN.h</ref> are API portable across driver implementations, not all implementations may support all these commands. Conversely, commands from driver implementation specific CAN*.h files add unique driver capabilities but are not API portable across all CAN driver implementations.</para><para>Commands supported by <ref refid="_c_a_n_8h" kindref="compound">CAN.h</ref> follow a CAN_CMD_&lt;cmd&gt; naming convention.<linebreak/>
 Commands supported by CAN*.h follow a CAN*_CMD_&lt;cmd&gt; naming convention.<linebreak/>
 Each control command defines <bold>arg</bold> differently. The types of <bold>arg</bold> are documented with each command.</para><para><simplesect kind="pre"><para><ref refid="_c_a_n_8h_1ac007ed113727f16540e8b8e5d4e88fe4" kindref="member">CAN_open()</ref> has to be called.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A CAN handle returned from <ref refid="_c_a_n_8h_1ac007ed113727f16540e8b8e5d4e88fe4" kindref="member">CAN_open()</ref></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmd</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="_c_a_n_8h" kindref="compound">CAN.h</ref> or CAN*.h commands.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional R/W (read/write) command argument accompanied with cmd</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Implementation specific return codes. Negative values indicate unsuccessful operations.</para></simplesect>
<simplesect kind="see"><para><ref refid="_c_a_n_8h_1ac007ed113727f16540e8b8e5d4e88fe4" kindref="member">CAN_open()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432e4/source/ti/drivers/CAN.h" line="542" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_c_a_n_8h_1ac007ed113727f16540e8b8e5d4e88fe4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_c_a_n_8h_1a04c6849a36f49970a418d45e72c9b516" kindref="member">CAN_Handle</ref></type>
        <definition>CAN_Handle CAN_open</definition>
        <argsstring>(uint_least8_t index, CAN_Params *params)</argsstring>
        <name>CAN_open</name>
        <param>
          <type>uint_least8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="struct_c_a_n___params" kindref="compound">CAN_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Function to initialize a given CAN peripheral. </para>        </briefdescription>
        <detaileddescription>
<para>Function to initialize a given CAN peripheral specified by the particular index value.</para><para><simplesect kind="pre"><para><ref refid="_c_a_n_8h_1ace7de72cc97ae2a35d63c3a4a4772a31" kindref="member">CAN_init()</ref> has been called</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Logical peripheral number for the CAN indexed into the CAN_config table</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a parameter block. If NULL, default parameter values will be used. All the fields in this structure are RO (read-only).</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="_c_a_n_8h_1a04c6849a36f49970a418d45e72c9b516" kindref="member">CAN_Handle</ref> upon success. NULL if an error occurs, or if the indexed CAN peripheral is already opened.</para></simplesect>
<simplesect kind="see"><para><ref refid="_c_a_n_8h_1ace7de72cc97ae2a35d63c3a4a4772a31" kindref="member">CAN_init()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="_c_a_n_8h_1abfc2ccd7bffde7724a17ab6c7e69f5cf" kindref="member">CAN_close()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432e4/source/ti/drivers/CAN.h" line="565" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_c_a_n_8h_1a9a7a7042e4948d4e04b9cb5205c50acf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CAN_Params_init</definition>
        <argsstring>(CAN_Params *params)</argsstring>
        <name>CAN_Params_init</name>
        <param>
          <type><ref refid="struct_c_a_n___params" kindref="compound">CAN_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Function to initialize the <ref refid="struct_c_a_n___params" kindref="compound">CAN_Params</ref> struct to its defaults. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>An pointer to <ref refid="struct_c_a_n___params" kindref="compound">CAN_Params</ref> structure for initialization</para></parameterdescription>
</parameteritem>
</parameterlist>
Defaults values are: mode = CAN_MODE_BLOCKING; direction = CAN_DIRECTION_READWRITE; readTimeout = CAN_WAIT_FOREVER; writeTimeout = CAN_WAIT_FOREVER; baudRate = 125000; </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432e4/source/ti/drivers/CAN.h" line="580" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_c_a_n_8h_1afe89a00428e47854c9881b4998f2464b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast32_t</type>
        <definition>int_fast32_t CAN_write</definition>
        <argsstring>(CAN_Handle handle, const void *buffer, size_t size)</argsstring>
        <name>CAN_write</name>
        <param>
          <type><ref refid="_c_a_n_8h_1a04c6849a36f49970a418d45e72c9b516" kindref="member">CAN_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Function that writes data to a CAN with interrupts enabled. </para>        </briefdescription>
        <detaileddescription>
<para>CAN_write() writes data from a memory buffer to the CAN interface. The source is specified by <emphasis>buffer</emphasis> and the number of bytes to write is given by <emphasis>size</emphasis>.</para><para>In <ref refid="_c_a_n_8h_1a4d6db79b5847128a849ac24b3c281960a6298c2511f40500c7124649998f4d3d6" kindref="member">CAN_MODE_BLOCKING</ref>, <ref refid="_c_a_n_8h_1afe89a00428e47854c9881b4998f2464b" kindref="member">CAN_write()</ref> blocks task execution until at least one CAN frame data in buffer has been written.</para><para>In <ref refid="_c_a_n_8h_1a4d6db79b5847128a849ac24b3c281960ac8985ce218669592d8b94f1c796113e1" kindref="member">CAN_MODE_NONBLOCKING</ref>, CAN_write() returns immediately with the number of bytes (in frame size chunks) that were able to be immediately written.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="_c_a_n_8h_1a04c6849a36f49970a418d45e72c9b516" kindref="member">CAN_Handle</ref> returned by <ref refid="_c_a_n_8h_1ac007ed113727f16540e8b8e5d4e88fe4" kindref="member">CAN_open()</ref></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>A read-only pointer to buffer containing CAN frames to be written to the CAN interface (<ref refid="_c_a_n_8h_1ae64d35abf30084ae3b17d47f1c3e2a17" kindref="member">CAN_Frame</ref>, struct <ref refid="structcan__frame" kindref="compound">can_frame</ref>)</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes in the buffer that should be written to the CAN interface, sizeof(CAN_frame)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the number of bytes that have been written to the CAN interface. If an error occurs, a negative error number is returned. If in non-blocking mode, and if there is no more room for write data, then -EAGAIN is return. If in blocking mode and a timeout occurs, then -ETIMEDOUT is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432e4/source/ti/drivers/CAN.h" line="610" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_c_a_n_8h_1a24ffdf96e912ae6218ec3d3f52549551" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast32_t</type>
        <definition>int_fast32_t CAN_read</definition>
        <argsstring>(CAN_Handle handle, void *buffer, size_t size)</argsstring>
        <name>CAN_read</name>
        <param>
          <type><ref refid="_c_a_n_8h_1a04c6849a36f49970a418d45e72c9b516" kindref="member">CAN_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Function that reads data from a CAN with interrupt enabled. </para>        </briefdescription>
        <detaileddescription>
<para>CAN_read() reads data into a memory buffer from the CAN interface. The destination is specified by <emphasis>buffer</emphasis> and the number of bytes to read is given by <emphasis>size</emphasis>.</para><para>In <ref refid="_c_a_n_8h_1a4d6db79b5847128a849ac24b3c281960a6298c2511f40500c7124649998f4d3d6" kindref="member">CAN_MODE_BLOCKING</ref>, <ref refid="_c_a_n_8h_1a24ffdf96e912ae6218ec3d3f52549551" kindref="member">CAN_read()</ref> blocks task execution until at least one CAN frame data can be received.</para><para>In <ref refid="_c_a_n_8h_1a4d6db79b5847128a849ac24b3c281960ac8985ce218669592d8b94f1c796113e1" kindref="member">CAN_MODE_NONBLOCKING</ref>, CAN_write() returns immediately with the number of bytes (in frame size chunks) that were able to be immediately received.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="_c_a_n_8h_1a04c6849a36f49970a418d45e72c9b516" kindref="member">CAN_Handle</ref> returned by <ref refid="_c_a_n_8h_1ac007ed113727f16540e8b8e5d4e88fe4" kindref="member">CAN_open()</ref></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to buffer containing space for CAN frames to be read into from the CAN interface (<ref refid="_c_a_n_8h_1ae64d35abf30084ae3b17d47f1c3e2a17" kindref="member">CAN_Frame</ref>, struct <ref refid="structcan__frame" kindref="compound">can_frame</ref>)</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes in the buffer that can be filled with receive data from the CAN interface, sizeof(CAN_frame)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the number of bytes that have been read from the CAN interface. If an error occurs, a negative error number is returned. If in non-blocking mode, and if there is no data to be read then -EAGAIN is returned. If in blocking mode and a timeout occurs, then -ETIMEDOUT is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432e4/source/ti/drivers/CAN.h" line="641" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><bold>PRELIMINARY</bold> CAN driver interface </para>    </briefdescription>
    <detaileddescription>
<para><hruler/>
</para><para><bold>WARNING</bold> These APIs are <bold>PRELIMINARY</bold>, and subject to change in the next few months.</para><para>To use the CAN driver, ensure that the correct driver library for your device is linked in and include this header file as follows: <programlisting><codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/CAN.h&gt;</highlight></codeline>
</programlisting></para><para>This module serves as the main interface for applications. Its purpose is to redirect the CAN APIs to specific driver implementations which are specified using a pointer to a <ref refid="struct_c_a_n___fxn_table" kindref="compound">CAN_FxnTable</ref>.</para><para><anchor id="_c_a_n_8h_1ti_drivers_CAN_Overview"/><heading level="1">Overview</heading>
</para><para>The Controller Area Network (CAN) driver is a generic driver that allows for communication on a CAN bus. It is a two-wire, half-duplex, LAN system that is collision free. The main method of transfer is by broadcasting. The CAN protocol defines the format of data transfer, and this CAN driver allows full functionality as a transmitting and receiving node on a bus. However, there can be higher-level software layers and stacks that use this driver to enable more advanced features. Functional modes available in this driver include blocking and non-blocking.</para><para>The APIs in this driver serve as an interface to a typical RTOS application. The specific peripheral implementations are responsible for creating all the RTOS specific primitives to allow for thread-safe operation.</para><para><anchor id="_c_a_n_8h_1ti_drivers_CAN_Usage"/><heading level="1">Usage</heading>
</para><para>The CAN driver interface provides device independent APIs, data types, and macros.</para><para><anchor id="_c_a_n_8h_1ti_drivers_CAN_Synopsis"/><heading level="2">Synopsis</heading>
</para><para>The following code example opens a CAN instance, creates an incrementing CAN frame, and continually writes them to the CAN bus. NOTE: a CAN receiver on this bus is needed, or else this transmitter will continually throw an error if it does not detect an ACK.</para><para><programlisting><codeline><highlight class="normal">uint8_t<sp/>i;</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Initialize<sp/>the<sp/>CAN<sp/>driver</highlight></codeline>
<codeline><highlight class="normal">CAN_init();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">CAN_Handle<sp/>canHandle;</highlight></codeline>
<codeline><highlight class="normal">CAN_Params<sp/>canParams;</highlight></codeline>
<codeline><highlight class="normal">CAN_Params_init(&amp;canParams);</highlight></codeline>
<codeline><highlight class="normal">canHandle<sp/>=<sp/>CAN_open(CONFIG_CAN0,<sp/>&amp;canParams);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(canHandle<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>CAN_open()<sp/>failed</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>while<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">for<sp/>(i<sp/>=<sp/>0;<sp/>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>CAN_Frame<sp/>canFrame[1];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>canFrame[0].can_id<sp/>=<sp/>i;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>canFrame[0].err<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>canFrame[0].rtr<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>canFrame[0].eff<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>canFrame[0].dlc<sp/>=<sp/>i<sp/>%<sp/>9;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>canFrame[0].data[0]<sp/>=<sp/>i;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>canFrame[0].data[1]<sp/>=<sp/>i<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>canFrame[0].data[2]<sp/>=<sp/>i<sp/>+<sp/>2;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>canFrame[0].data[3]<sp/>=<sp/>i<sp/>+<sp/>3;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>canFrame[0].data[4]<sp/>=<sp/>i<sp/>+<sp/>4;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>canFrame[0].data[5]<sp/>=<sp/>i<sp/>+<sp/>5;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>canFrame[0].data[6]<sp/>=<sp/>i<sp/>+<sp/>6;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>canFrame[0].data[7]<sp/>=<sp/>i<sp/>+<sp/>7;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>CAN_write(canHandle,<sp/>canFrame,<sp/>sizeof(canFrame));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>Details for the example code above are described in the following subsections.</para><para><anchor id="_c_a_n_8h_1ti_drivers_CAN_Configuration"/><heading level="3">CAN Driver Configuration</heading>
</para><para>In order to use the CAN APIs, the application is required to provide device-specific CAN configuration in the ti_drivers_config.c file. The CAN driver interface defines a configuration data structure:</para><para><programlisting><codeline><highlight class="normal">typedef<sp/>struct<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>CAN_FxnTable<sp/><sp/>const<sp/><sp/><sp/><sp/>*fxnTablePtr;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*object;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/><sp/><sp/><sp/>*hwAttrs;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>CAN_Frame<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*rxBufPtr;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>CAN_frame<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*txBufPtr;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>size_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rxBufSize;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>size_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>txBufSize;</highlight></codeline>
<codeline><highlight class="normal">}<sp/>CAN_Config;</highlight></codeline>
</programlisting></para><para>You will need to check the device-specific CAN driver implementation&apos;s header file for example configuration. Please also refer to the ti_drivers_config.c file to see the CAN configuration.</para><para><heading level="3">Initializing the CAN Driver</heading>
</para><para><ref refid="_c_a_n_8h_1ace7de72cc97ae2a35d63c3a4a4772a31" kindref="member">CAN_init()</ref> must be called before any other CAN APIs. This function calls the device implementation&apos;s CAN initialization function, for each element of CAN_config[].</para><para><heading level="3">Opening the CAN Driver</heading>
</para><para>Opening a CAN requires four steps:<orderedlist>
<listitem><para>Create and initialize a <ref refid="struct_c_a_n___params" kindref="compound">CAN_Params</ref> structure.</para></listitem><listitem><para>Fill in the desired parameters.</para></listitem><listitem><para>Call <ref refid="_c_a_n_8h_1ac007ed113727f16540e8b8e5d4e88fe4" kindref="member">CAN_open()</ref>, passing the index of the CAN in the CAN_config structure, and the address of the <ref refid="struct_c_a_n___params" kindref="compound">CAN_Params</ref> structure. The CAN instance is specified by the index in the CAN_config structure.</para></listitem><listitem><para>Check that the CAN handle returned by <ref refid="_c_a_n_8h_1ac007ed113727f16540e8b8e5d4e88fe4" kindref="member">CAN_open()</ref> is non-NULL, and save it. The handle will be used to read and write to the CAN you just opened.</para></listitem></orderedlist>
</para><para>Only one CAN index can be used at a time; calling <ref refid="_c_a_n_8h_1ac007ed113727f16540e8b8e5d4e88fe4" kindref="member">CAN_open()</ref> a second time with the same index previously passed to <ref refid="_c_a_n_8h_1ac007ed113727f16540e8b8e5d4e88fe4" kindref="member">CAN_open()</ref> will result in an error. You can, though, re-use the index if the instance is closed via <ref refid="_c_a_n_8h_1abfc2ccd7bffde7724a17ab6c7e69f5cf" kindref="member">CAN_close()</ref>. In the example code, CONFIG_CAN0 is passed to <ref refid="_c_a_n_8h_1ac007ed113727f16540e8b8e5d4e88fe4" kindref="member">CAN_open()</ref>. This macro is defined in the applications &quot;ti_drivers_config.h&quot; file.</para><para><heading level="3">Modes of Operation</heading>
</para><para>The CAN driver can operate in blocking mode or nonblocking mode, by setting the mode parameters passed to <ref refid="_c_a_n_8h_1ac007ed113727f16540e8b8e5d4e88fe4" kindref="member">CAN_open()</ref>. If these parameters are not set, as in the example code, the CAN driver defaults to blocking mode. Options for the mode parameter are <ref refid="_c_a_n_8h_1a4d6db79b5847128a849ac24b3c281960a6298c2511f40500c7124649998f4d3d6" kindref="member">CAN_MODE_BLOCKING</ref> and <ref refid="_c_a_n_8h_1a4d6db79b5847128a849ac24b3c281960ac8985ce218669592d8b94f1c796113e1" kindref="member">CAN_MODE_NONBLOCKING</ref>:</para><para><itemizedlist>
<listitem><para><ref refid="_c_a_n_8h_1a4d6db79b5847128a849ac24b3c281960a6298c2511f40500c7124649998f4d3d6" kindref="member">CAN_MODE_BLOCKING</ref> uses a semaphore to block while data is being sent or read. The context of calling <ref refid="_c_a_n_8h_1a24ffdf96e912ae6218ec3d3f52549551" kindref="member">CAN_read()</ref> or <ref refid="_c_a_n_8h_1afe89a00428e47854c9881b4998f2464b" kindref="member">CAN_write()</ref> must be a Task when using <ref refid="_c_a_n_8h_1a4d6db79b5847128a849ac24b3c281960a6298c2511f40500c7124649998f4d3d6" kindref="member">CAN_MODE_BLOCKING</ref>. The <ref refid="_c_a_n_8h_1afe89a00428e47854c9881b4998f2464b" kindref="member">CAN_write()</ref> or <ref refid="_c_a_n_8h_1a24ffdf96e912ae6218ec3d3f52549551" kindref="member">CAN_read()</ref> call will block until all data is sent or received, or the write timeout or read timeout expires, whichever happens first.</para></listitem><listitem><para><ref refid="_c_a_n_8h_1a4d6db79b5847128a849ac24b3c281960ac8985ce218669592d8b94f1c796113e1" kindref="member">CAN_MODE_NONBLOCKING</ref> is non-blocking and <ref refid="_c_a_n_8h_1a24ffdf96e912ae6218ec3d3f52549551" kindref="member">CAN_read()</ref> and <ref refid="_c_a_n_8h_1afe89a00428e47854c9881b4998f2464b" kindref="member">CAN_write()</ref> will return either with the number of bytes successfully read/written, or a negative error number.</para></listitem></itemizedlist>
</para><para><heading level="3">Reading and Writing data</heading>
</para><para>The example code reads one CAN frame from the CAN instance, and then writes one CAN frame back to the same instance:</para><para><programlisting><codeline><highlight class="normal">CAN_read(can,<sp/>&amp;canFrame,<sp/>sizeof(canFrame));</highlight></codeline>
<codeline><highlight class="normal">CAN_write(can,<sp/>&amp;canFrame,<sp/>sizeof(canFrame));</highlight></codeline>
</programlisting></para><para>The CAN driver allows <ref refid="_c_a_n_8h_1a24ffdf96e912ae6218ec3d3f52549551" kindref="member">CAN_read()</ref> and <ref refid="_c_a_n_8h_1afe89a00428e47854c9881b4998f2464b" kindref="member">CAN_write()</ref> calls to happen for any node at any time from the CAN bus. Please see the CAN protocol for how it handles collisions. The ability to filter incoming messages are also available through <ref refid="struct_c_a_n___params" kindref="compound">CAN_Params</ref>.</para><para><heading level="1">Implementation</heading>
</para><para>The CAN driver interface module is joined (at link time) to an array of CAN_Config data structures named <emphasis>CAN_config</emphasis>. CAN_config is implemented in the application with each entry being an instance of a CAN peripheral. Each entry in <emphasis>CAN_config</emphasis> contains a:<itemizedlist>
<listitem><para>(<ref refid="struct_c_a_n___fxn_table" kindref="compound">CAN_FxnTable</ref> *) to a set of functions that implement a CAN peripheral</para></listitem><listitem><para>(void *) data object that is associated with the <ref refid="struct_c_a_n___fxn_table" kindref="compound">CAN_FxnTable</ref></para></listitem><listitem><para>(void *) hardware attributes that are associated with the <ref refid="struct_c_a_n___fxn_table" kindref="compound">CAN_FxnTable</ref></para></listitem></itemizedlist>
</para><para>The CAN APIs are redirected to the device specific implementations using the <ref refid="struct_c_a_n___fxn_table" kindref="compound">CAN_FxnTable</ref> pointer of the CAN_config entry. In order to use device specific functions of the CAN driver directly, link in the correct driver library for your device and include the device specific CAN driver header file (which in turn includes <ref refid="_c_a_n_8h" kindref="compound">CAN.h</ref>). For example, for the MSP432 family of devices, you would include the following header file: <programlisting><codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/can/CANMSP432.h&gt;</highlight></codeline>
</programlisting> <hruler/>
 </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2018-2019,<sp/>Texas<sp/>Instruments<sp/>Incorporated</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Texas<sp/>Instruments<sp/>Incorporated<sp/>nor<sp/>the<sp/>names<sp/>of</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">/*!*****************************************************************************</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/><sp/>@file<sp/><sp/><sp/><sp/><sp/><sp/><sp/>CAN.h</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/><sp/>@brief<sp/><sp/><sp/><sp/><sp/><sp/>&lt;b&gt;PRELIMINARY&lt;/b&gt;<sp/>CAN<sp/>driver<sp/>interface</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/><sp/>&lt;b&gt;WARNING&lt;/b&gt;<sp/>These<sp/>APIs<sp/>are<sp/>&lt;b&gt;PRELIMINARY&lt;/b&gt;,<sp/>and<sp/>subject<sp/>to</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/><sp/>change<sp/>in<sp/>the<sp/>next<sp/>few<sp/>months.</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/><sp/>To<sp/>use<sp/>the<sp/>CAN<sp/>driver,<sp/>ensure<sp/>that<sp/>the<sp/>correct<sp/>driver<sp/>library<sp/>for<sp/>your</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/><sp/>device<sp/>is<sp/>linked<sp/>in<sp/>and<sp/>include<sp/>this<sp/>header<sp/>file<sp/>as<sp/>follows:</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/><sp/>#include<sp/>&lt;ti/drivers/CAN.h&gt;</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>module<sp/>serves<sp/>as<sp/>the<sp/>main<sp/>interface<sp/>for<sp/>applications.<sp/><sp/>Its<sp/>purpose</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/><sp/>is<sp/>to<sp/>redirect<sp/>the<sp/>CAN<sp/>APIs<sp/>to<sp/>specific<sp/>driver<sp/>implementations</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/><sp/>which<sp/>are<sp/>specified<sp/>using<sp/>a<sp/>pointer<sp/>to<sp/>a<sp/>#CAN_FxnTable.</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_CAN_Overview</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Overview<sp/>#</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>Controller<sp/>Area<sp/>Network<sp/>(CAN)<sp/>driver<sp/>is<sp/>a<sp/>generic<sp/>driver<sp/>that<sp/>allows</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/><sp/>for<sp/>communication<sp/>on<sp/>a<sp/>CAN<sp/>bus.<sp/>It<sp/>is<sp/>a<sp/>two-wire,<sp/>half-duplex,<sp/>LAN<sp/>system</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/><sp/>that<sp/>is<sp/>collision<sp/>free.<sp/>The<sp/>main<sp/>method<sp/>of<sp/>transfer<sp/>is<sp/>by<sp/>broadcasting.</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>CAN<sp/>protocol<sp/>defines<sp/>the<sp/>format<sp/>of<sp/>data<sp/>transfer,<sp/>and<sp/>this<sp/>CAN<sp/>driver</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/><sp/>allows<sp/>full<sp/>functionality<sp/>as<sp/>a<sp/>transmitting<sp/>and<sp/>receiving<sp/>node<sp/>on<sp/>a<sp/>bus.</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/><sp/>However,<sp/>there<sp/>can<sp/>be<sp/>higher-level<sp/>software<sp/>layers<sp/>and<sp/>stacks<sp/>that<sp/>use<sp/>this</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/><sp/>driver<sp/>to<sp/>enable<sp/>more<sp/>advanced<sp/>features.</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/><sp/>Functional<sp/>modes<sp/>available<sp/>in<sp/>this<sp/>driver<sp/>include<sp/>blocking<sp/>and<sp/>non-blocking.</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>APIs<sp/>in<sp/>this<sp/>driver<sp/>serve<sp/>as<sp/>an<sp/>interface<sp/>to<sp/>a<sp/>typical<sp/>RTOS</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/><sp/>application.<sp/>The<sp/>specific<sp/>peripheral<sp/>implementations<sp/>are<sp/>responsible<sp/>for</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/><sp/>creating<sp/>all<sp/>the<sp/>RTOS<sp/>specific<sp/>primitives<sp/>to<sp/>allow<sp/>for<sp/>thread-safe</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/><sp/>operation.</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_CAN_Usage</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Usage<sp/>#</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>CAN<sp/>driver<sp/>interface<sp/>provides<sp/>device<sp/>independent<sp/>APIs,<sp/>data<sp/>types,</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*<sp/><sp/>and<sp/>macros.</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_CAN_Synopsis</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>Synopsis<sp/>#</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>following<sp/>code<sp/>example<sp/>opens<sp/>a<sp/>CAN<sp/>instance,<sp/>creates</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/><sp/>an<sp/>incrementing<sp/>CAN<sp/>frame,<sp/>and<sp/>continually<sp/>writes<sp/>them<sp/>to<sp/>the<sp/>CAN<sp/>bus.</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*<sp/><sp/>NOTE:<sp/>a<sp/>CAN<sp/>receiver<sp/>on<sp/>this<sp/>bus<sp/>is<sp/>needed,<sp/>or<sp/>else<sp/>this<sp/>transmitter<sp/>will</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*<sp/><sp/>continually<sp/>throw<sp/>an<sp/>error<sp/>if<sp/>it<sp/>does<sp/>not<sp/>detect<sp/>an<sp/>ACK.</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>uint8_t<sp/>i;</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>//<sp/>Initialize<sp/>the<sp/>CAN<sp/>driver</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>CAN_init();</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>CAN_Handle<sp/>canHandle;</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>CAN_Params<sp/>canParams;</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>CAN_Params_init(&amp;canParams);</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>canHandle<sp/>=<sp/>CAN_open(CONFIG_CAN0,<sp/>&amp;canParams);</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>if<sp/>(canHandle<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>CAN_open()<sp/>failed</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(1);</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>for<sp/>(i<sp/>=<sp/>0;<sp/>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CAN_Frame<sp/>canFrame[1];</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canFrame[0].can_id<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canFrame[0].err<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canFrame[0].rtr<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canFrame[0].eff<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canFrame[0].dlc<sp/>=<sp/>i<sp/>%<sp/>9;</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canFrame[0].data[0]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canFrame[0].data[1]<sp/>=<sp/>i<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canFrame[0].data[2]<sp/>=<sp/>i<sp/>+<sp/>2;</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canFrame[0].data[3]<sp/>=<sp/>i<sp/>+<sp/>3;</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canFrame[0].data[4]<sp/>=<sp/>i<sp/>+<sp/>4;</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canFrame[0].data[5]<sp/>=<sp/>i<sp/>+<sp/>5;</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canFrame[0].data[6]<sp/>=<sp/>i<sp/>+<sp/>6;</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canFrame[0].data[7]<sp/>=<sp/>i<sp/>+<sp/>7;</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CAN_write(canHandle,<sp/>canFrame,<sp/>sizeof(canFrame));</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*<sp/><sp/>Details<sp/>for<sp/>the<sp/>example<sp/>code<sp/>above<sp/>are<sp/>described<sp/>in<sp/>the<sp/>following</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*<sp/><sp/>subsections.</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_CAN_Configuration</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*<sp/><sp/>###<sp/>CAN<sp/>Driver<sp/>Configuration<sp/>#</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*<sp/><sp/>In<sp/>order<sp/>to<sp/>use<sp/>the<sp/>CAN<sp/>APIs,<sp/>the<sp/>application<sp/>is<sp/>required<sp/>to</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*<sp/><sp/>provide<sp/>device-specific<sp/>CAN<sp/>configuration<sp/>in<sp/>the<sp/>ti_drivers_config.c<sp/>file.</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>CAN<sp/>driver<sp/>interface<sp/>defines<sp/>a<sp/>configuration<sp/>data<sp/>structure:</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*<sp/><sp/>typedef<sp/>struct<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>CAN_FxnTable<sp/><sp/>const<sp/><sp/><sp/><sp/>*fxnTablePtr;</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*object;</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>void<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/><sp/><sp/><sp/>*hwAttrs;</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>CAN_Frame<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*rxBufPtr;</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>CAN_frame<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*txBufPtr;</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rxBufSize;</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>txBufSize;</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/>*<sp/><sp/>}<sp/>CAN_Config;</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>*<sp/><sp/>You<sp/>will<sp/>need<sp/>to<sp/>check<sp/>the<sp/>device-specific<sp/>CAN<sp/>driver<sp/>implementation&apos;s</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*<sp/><sp/>header<sp/>file<sp/>for<sp/>example<sp/>configuration.<sp/><sp/>Please<sp/>also<sp/>refer<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*<sp/><sp/>ti_drivers_config.c<sp/>file<sp/>to<sp/>see<sp/>the<sp/>CAN<sp/>configuration.</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/>*<sp/><sp/>###<sp/>Initializing<sp/>the<sp/>CAN<sp/>Driver<sp/>#</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/>*<sp/><sp/>CAN_init()<sp/>must<sp/>be<sp/>called<sp/>before<sp/>any<sp/>other<sp/>CAN<sp/>APIs.<sp/><sp/>This<sp/>function</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/>*<sp/><sp/>calls<sp/>the<sp/>device<sp/>implementation&apos;s<sp/>CAN<sp/>initialization<sp/>function,<sp/>for<sp/>each</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/>*<sp/><sp/>element<sp/>of<sp/>CAN_config[].</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/>*<sp/><sp/>###<sp/>Opening<sp/>the<sp/>CAN<sp/>Driver<sp/>#</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/>*<sp/><sp/>Opening<sp/>a<sp/>CAN<sp/>requires<sp/>four<sp/>steps:</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/>*<sp/><sp/>1.<sp/><sp/>Create<sp/>and<sp/>initialize<sp/>a<sp/>CAN_Params<sp/>structure.</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/>*<sp/><sp/>2.<sp/><sp/>Fill<sp/>in<sp/>the<sp/>desired<sp/>parameters.</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/>*<sp/><sp/>3.<sp/><sp/>Call<sp/>CAN_open(),<sp/>passing<sp/>the<sp/>index<sp/>of<sp/>the<sp/>CAN<sp/>in<sp/>the<sp/>CAN_config</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>structure,<sp/>and<sp/>the<sp/>address<sp/>of<sp/>the<sp/>CAN_Params<sp/>structure.<sp/><sp/>The</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>CAN<sp/>instance<sp/>is<sp/>specified<sp/>by<sp/>the<sp/>index<sp/>in<sp/>the<sp/>CAN_config<sp/>structure.</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/>*<sp/><sp/>4.<sp/><sp/>Check<sp/>that<sp/>the<sp/>CAN<sp/>handle<sp/>returned<sp/>by<sp/>CAN_open()<sp/>is<sp/>non-NULL,</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>save<sp/>it.<sp/><sp/>The<sp/>handle<sp/>will<sp/>be<sp/>used<sp/>to<sp/>read<sp/>and<sp/>write<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>CAN<sp/>you<sp/>just<sp/>opened.</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/>*<sp/><sp/>Only<sp/>one<sp/>CAN<sp/>index<sp/>can<sp/>be<sp/>used<sp/>at<sp/>a<sp/>time;<sp/>calling<sp/>CAN_open()<sp/>a<sp/>second</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*<sp/><sp/>time<sp/>with<sp/>the<sp/>same<sp/>index<sp/>previously<sp/>passed<sp/>to<sp/>CAN_open()<sp/>will<sp/>result<sp/>in</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*<sp/><sp/>an<sp/>error.<sp/><sp/>You<sp/>can,<sp/>though,<sp/>re-use<sp/>the<sp/>index<sp/>if<sp/>the<sp/>instance<sp/>is<sp/>closed</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*<sp/><sp/>via<sp/>CAN_close().</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/>*<sp/><sp/>In<sp/>the<sp/>example<sp/>code,<sp/>CONFIG_CAN0<sp/>is<sp/>passed<sp/>to<sp/>CAN_open().<sp/>This<sp/>macro</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/>*<sp/><sp/>is<sp/>defined<sp/>in<sp/>the<sp/>applications<sp/>&quot;ti_drivers_config.h&quot;<sp/>file.</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/>*<sp/><sp/>###<sp/>Modes<sp/>of<sp/>Operation<sp/>#</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>CAN<sp/>driver<sp/>can<sp/>operate<sp/>in<sp/>blocking<sp/>mode<sp/>or<sp/>nonblocking<sp/>mode,<sp/>by</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/>*<sp/><sp/>setting<sp/>the<sp/>mode<sp/>parameters<sp/>passed<sp/>to<sp/>CAN_open().</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*<sp/><sp/>If<sp/>these<sp/>parameters<sp/>are<sp/>not<sp/>set,<sp/>as<sp/>in<sp/>the<sp/>example<sp/>code,<sp/>the<sp/>CAN</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*<sp/><sp/>driver<sp/>defaults<sp/>to<sp/>blocking<sp/>mode.<sp/><sp/>Options<sp/>for<sp/>the<sp/>mode<sp/>parameter<sp/>are</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*<sp/><sp/>#CAN_MODE_BLOCKING<sp/>and<sp/>#CAN_MODE_NONBLOCKING:</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>#CAN_MODE_BLOCKING<sp/>uses<sp/>a<sp/>semaphore<sp/>to<sp/>block<sp/>while<sp/>data<sp/>is<sp/>being<sp/>sent</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>or<sp/>read.<sp/>The<sp/>context<sp/>of<sp/>calling<sp/>CAN_read()<sp/>or<sp/>CAN_write()<sp/>must<sp/>be<sp/>a<sp/>Task</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>when<sp/>using<sp/>#CAN_MODE_BLOCKING.<sp/>The<sp/>CAN_write()<sp/>or<sp/>CAN_read()<sp/>call</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>will<sp/>block<sp/>until<sp/>all<sp/>data<sp/>is<sp/>sent<sp/>or<sp/>received,<sp/>or<sp/>the<sp/>write<sp/>timeout<sp/>or</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>read<sp/>timeout<sp/>expires,<sp/>whichever<sp/>happens<sp/>first.</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>#CAN_MODE_NONBLOCKING<sp/>is<sp/>non-blocking<sp/>and<sp/>CAN_read()<sp/>and<sp/>CAN_write()</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>will<sp/>return<sp/>either<sp/>with<sp/>the<sp/>number<sp/>of<sp/>bytes<sp/>successfully<sp/>read/written,</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>or<sp/>a<sp/>negative<sp/>error<sp/>number.</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*<sp/><sp/>###<sp/>Reading<sp/>and<sp/>Writing<sp/>data<sp/>#</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>example<sp/>code<sp/>reads<sp/>one<sp/>CAN<sp/>frame<sp/>from<sp/>the<sp/>CAN<sp/>instance,<sp/>and<sp/>then<sp/>writes</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/>*<sp/><sp/>one<sp/>CAN<sp/>frame<sp/>back<sp/>to<sp/>the<sp/>same<sp/>instance:</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/>*<sp/><sp/>CAN_read(can,<sp/>&amp;canFrame,<sp/>sizeof(canFrame));</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/>*<sp/><sp/>CAN_write(can,<sp/>&amp;canFrame,<sp/>sizeof(canFrame));</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>CAN<sp/>driver<sp/>allows<sp/>CAN_read()<sp/>and<sp/>CAN_write()<sp/>calls<sp/>to<sp/>happen<sp/>for<sp/>any</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/>*<sp/><sp/>node<sp/>at<sp/>any<sp/>time<sp/>from<sp/>the<sp/>CAN<sp/>bus.<sp/>Please<sp/>see<sp/>the<sp/>CAN<sp/>protocol<sp/>for<sp/>how<sp/>it</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/>*<sp/><sp/>handles<sp/>collisions.<sp/>The<sp/>ability<sp/>to<sp/>filter<sp/>incoming<sp/>messages<sp/>are<sp/>also</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/>*<sp/><sp/>available<sp/>through<sp/>CAN_Params.</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Implementation<sp/>#</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>CAN<sp/>driver<sp/>interface<sp/>module<sp/>is<sp/>joined<sp/>(at<sp/>link<sp/>time)<sp/>to<sp/>an</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/>*<sp/><sp/>array<sp/>of<sp/>CAN_Config<sp/>data<sp/>structures<sp/>named<sp/>*CAN_config*.</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/>*<sp/><sp/>CAN_config<sp/>is<sp/>implemented<sp/>in<sp/>the<sp/>application<sp/>with<sp/>each<sp/>entry<sp/>being<sp/>an</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/>*<sp/><sp/>instance<sp/>of<sp/>a<sp/>CAN<sp/>peripheral.<sp/>Each<sp/>entry<sp/>in<sp/>*CAN_config*<sp/>contains<sp/>a:</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>(CAN_FxnTable<sp/>*)<sp/>to<sp/>a<sp/>set<sp/>of<sp/>functions<sp/>that<sp/>implement<sp/>a<sp/>CAN<sp/>peripheral</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>(void<sp/>*)<sp/>data<sp/>object<sp/>that<sp/>is<sp/>associated<sp/>with<sp/>the<sp/>CAN_FxnTable</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>(void<sp/>*)<sp/>hardware<sp/>attributes<sp/>that<sp/>are<sp/>associated<sp/>with<sp/>the<sp/>CAN_FxnTable</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>CAN<sp/>APIs<sp/>are<sp/>redirected<sp/>to<sp/>the<sp/>device<sp/>specific<sp/>implementations</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/>*<sp/><sp/>using<sp/>the<sp/>CAN_FxnTable<sp/>pointer<sp/>of<sp/>the<sp/>CAN_config<sp/>entry.</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/>*<sp/><sp/>In<sp/>order<sp/>to<sp/>use<sp/>device<sp/>specific<sp/>functions<sp/>of<sp/>the<sp/>CAN<sp/>driver<sp/>directly,</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/>*<sp/><sp/>link<sp/>in<sp/>the<sp/>correct<sp/>driver<sp/>library<sp/>for<sp/>your<sp/>device<sp/>and<sp/>include<sp/>the</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/>*<sp/><sp/>device<sp/>specific<sp/>CAN<sp/>driver<sp/>header<sp/>file<sp/>(which<sp/>in<sp/>turn<sp/>includes<sp/>CAN.h).</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/>*<sp/><sp/>For<sp/>example,<sp/>for<sp/>the<sp/>MSP432<sp/>family<sp/>of<sp/>devices,<sp/>you<sp/>would<sp/>include<sp/>the</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/>*<sp/><sp/>following<sp/>header<sp/>file:</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>@code</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>#include<sp/>&lt;ti/drivers/can/CANMSP432.h&gt;</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/>*<sp/><sp/>============================================================================</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ti_drivers_CAN__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ti_drivers_CAN__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="source_2ti_2drivers_2can_2types_8h" kindref="compound">ti/drivers/can/types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="252" refid="group___c_a_n___c_o_n_t_r_o_l_1gad3aec7d0ff50fa7ecd46f41c46b1dd4b" refkind="member"><highlight class="preprocessor">#define<sp/>CAN_CMD_RESERVED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="266" refid="group___c_a_n___c_o_n_t_r_o_l_1ga03ae91524e3e059c0b1f2ba091ed0794" refkind="member"><highlight class="preprocessor">#define<sp/>CAN_STATUS_RESERVED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="281" refid="group___c_a_n___s_t_a_t_u_s_1gaec519b2472a0cb3c778a1e2cffd7de5d" refkind="member"><highlight class="preprocessor">#define<sp/>CAN_STATUS_SUCCESS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="289" refid="group___c_a_n___s_t_a_t_u_s_1gaf97bc85f9b1ce1bd427ab76347994217" refkind="member"><highlight class="preprocessor">#define<sp/>CAN_STATUS_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="298" refid="group___c_a_n___s_t_a_t_u_s_1ga4b40d390fb347ceb930b54982e62e8c3" refkind="member"><highlight class="preprocessor">#define<sp/>CAN_STATUS_UNDEFINEDCMD<sp/><sp/><sp/><sp/>(-2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="305" refid="_c_a_n_8h_1a9a7efefe615409e714f165d1fdcf00ae" refkind="member"><highlight class="preprocessor">#define<sp/><sp/>CAN_WAIT_FOREVER<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(~(0U))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="310" refid="_c_a_n_8h_1a04c6849a36f49970a418d45e72c9b516" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_c_a_n___config__" kindref="compound">CAN_Config_</ref><sp/><sp/><sp/><sp/>*<ref refid="_c_a_n_8h_1a04c6849a36f49970a418d45e72c9b516" kindref="member">CAN_Handle</ref>;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="318" refid="_c_a_n_8h_1a4d6db79b5847128a849ac24b3c281960" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="324" refid="_c_a_n_8h_1a4d6db79b5847128a849ac24b3c281960a6298c2511f40500c7124649998f4d3d6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_a_n_8h_1a4d6db79b5847128a849ac24b3c281960a6298c2511f40500c7124649998f4d3d6" kindref="member">CAN_MODE_BLOCKING</ref>,</highlight></codeline>
<codeline lineno="330" refid="_c_a_n_8h_1a4d6db79b5847128a849ac24b3c281960ac8985ce218669592d8b94f1c796113e1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_a_n_8h_1a4d6db79b5847128a849ac24b3c281960ac8985ce218669592d8b94f1c796113e1" kindref="member">CAN_MODE_NONBLOCKING</ref></highlight></codeline>
<codeline lineno="331"><highlight class="normal">}<sp/><ref refid="_c_a_n_8h_1a4d6db79b5847128a849ac24b3c281960" kindref="member">CAN_Mode</ref>;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="339" refid="_c_a_n_8h_1a34e5130739e2ad4bdf3cbf3eccbdf83f" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="341" refid="_c_a_n_8h_1a34e5130739e2ad4bdf3cbf3eccbdf83fa41cd246c9c2837823376b22096157c7c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_a_n_8h_1a34e5130739e2ad4bdf3cbf3eccbdf83fa41cd246c9c2837823376b22096157c7c" kindref="member">CAN_DIRECTION_READ</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x1,</highlight></codeline>
<codeline lineno="343" refid="_c_a_n_8h_1a34e5130739e2ad4bdf3cbf3eccbdf83fa62f442390bb202f9314368dbafc54adf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_a_n_8h_1a34e5130739e2ad4bdf3cbf3eccbdf83fa62f442390bb202f9314368dbafc54adf" kindref="member">CAN_DIRECTION_WRITE</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x2,</highlight></codeline>
<codeline lineno="348" refid="_c_a_n_8h_1a34e5130739e2ad4bdf3cbf3eccbdf83fadb0f0d4c55d5e35112c2cba7aa697738" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_a_n_8h_1a34e5130739e2ad4bdf3cbf3eccbdf83fadb0f0d4c55d5e35112c2cba7aa697738" kindref="member">CAN_DIRECTION_READWRITE</ref><sp/><sp/><sp/>=<sp/>0x3,</highlight></codeline>
<codeline lineno="349"><highlight class="normal">}<sp/><ref refid="_c_a_n_8h_1a34e5130739e2ad4bdf3cbf3eccbdf83f" kindref="member">CAN_Direction</ref>;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="359" refid="struct_c_a_n___params" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="360" refid="struct_c_a_n___params_1a39b78e712b6b9cff8ee39bcd960f4cbf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CAN_Mode<sp/><sp/><ref refid="struct_c_a_n___params_1a39b78e712b6b9cff8ee39bcd960f4cbf" kindref="member">mode</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="361" refid="struct_c_a_n___params_1acb0c88905a9bdf060e2d0af89b4d7030" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_a_n_8h_1a34e5130739e2ad4bdf3cbf3eccbdf83f" kindref="member">CAN_Direction</ref><sp/><sp/><ref refid="struct_c_a_n___params_1acb0c88905a9bdf060e2d0af89b4d7030" kindref="member">direction</ref>;<sp/></highlight></codeline>
<codeline lineno="362" refid="struct_c_a_n___params_1ad248c9634334dd5413fdd113e987e66d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><ref refid="struct_c_a_n___params_1ad248c9634334dd5413fdd113e987e66d" kindref="member">filterID</ref>;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="363" refid="struct_c_a_n___params_1a3746fda33cd771848e460681aacb104b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><ref refid="struct_c_a_n___params_1a3746fda33cd771848e460681aacb104b" kindref="member">filterMask</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="364" refid="struct_c_a_n___params_1ab02c55c5f4f582437a274a772e9b5c0c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><ref refid="struct_c_a_n___params_1ab02c55c5f4f582437a274a772e9b5c0c" kindref="member">readTimeout</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="365" refid="struct_c_a_n___params_1a9c2958cc4b339eb2f755517628d6685e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><ref refid="struct_c_a_n___params_1a9c2958cc4b339eb2f755517628d6685e" kindref="member">writeTimeout</ref>;<sp/></highlight></codeline>
<codeline lineno="366"><highlight class="normal">}<sp/><ref refid="struct_c_a_n___params" kindref="compound">CAN_Params</ref>;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="380" refid="_c_a_n_8h_1ae64d35abf30084ae3b17d47f1c3e2a17" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcan__frame" kindref="compound">can_frame</ref><sp/><ref refid="structcan__frame" kindref="compound">CAN_Frame</ref>;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="386" refid="_c_a_n_8h_1acc8897d6cde8780b2ea1c6ded3f1f549" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_c_a_n_8h_1acc8897d6cde8780b2ea1c6ded3f1f549" kindref="member">CAN_CloseFxn</ref>)<sp/>(CAN_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="392" refid="_c_a_n_8h_1ad949f7ebd426255b83a5abd990a609c0" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int_fast16_t<sp/>(*<ref refid="_c_a_n_8h_1ad949f7ebd426255b83a5abd990a609c0" kindref="member">CAN_ControlFxn</ref>)<sp/>(CAN_Handle<sp/>handle,<sp/>uint_fast16_t<sp/>cmd,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="398" refid="_c_a_n_8h_1a6f6668a04da1b06d98709be9a2426cc7" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_c_a_n_8h_1a6f6668a04da1b06d98709be9a2426cc7" kindref="member">CAN_InitFxn</ref>)<sp/>(CAN_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="404" refid="_c_a_n_8h_1a51b71b8ad224e01470b5c9ee34b3f95e" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="_c_a_n_8h_1a04c6849a36f49970a418d45e72c9b516" kindref="member">CAN_Handle</ref><sp/>(*<ref refid="_c_a_n_8h_1a51b71b8ad224e01470b5c9ee34b3f95e" kindref="member">CAN_OpenFxn</ref>)<sp/>(CAN_Handle<sp/>handle,<sp/><ref refid="struct_c_a_n___params" kindref="compound">CAN_Params</ref><sp/>*params);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="410" refid="_c_a_n_8h_1aee976ab0f943a5efa7d15e70906b11d1" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int_fast32_t<sp/>(*<ref refid="_c_a_n_8h_1aee976ab0f943a5efa7d15e70906b11d1" kindref="member">CAN_ReadFxn</ref>)<sp/>(CAN_Handle<sp/>handle,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buffer,</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="417" refid="_c_a_n_8h_1a37e1f018c6ee8289264e184cac3b6f32" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int_fast32_t<sp/>(*<ref refid="_c_a_n_8h_1a37e1f018c6ee8289264e184cac3b6f32" kindref="member">CAN_WriteFxn</ref>)<sp/>(CAN_Handle<sp/>handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buffer,</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="424" refid="_c_a_n_8h_1a191c1d511cada1b1d82c634c6859666b" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_c_a_n_8h_1a191c1d511cada1b1d82c634c6859666b" kindref="member">CAN_TxMsgFxn</ref>)<sp/>(CAN_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="431" refid="struct_c_a_n___fxn_table" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="433" refid="struct_c_a_n___fxn_table_1aad85e3f44073370456e3b2608cebd82c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_a_n_8h_1acc8897d6cde8780b2ea1c6ded3f1f549" kindref="member">CAN_CloseFxn</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_c_a_n___fxn_table_1aad85e3f44073370456e3b2608cebd82c" kindref="member">closeFxn</ref>;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="436" refid="struct_c_a_n___fxn_table_1abe6eed1da51f5dd28cf4d848f59ada3b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_a_n_8h_1ad949f7ebd426255b83a5abd990a609c0" kindref="member">CAN_ControlFxn</ref><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_c_a_n___fxn_table_1abe6eed1da51f5dd28cf4d848f59ada3b" kindref="member">controlFxn</ref>;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="439" refid="struct_c_a_n___fxn_table_1a796e05c5237a6d06b01e25f4a11809e4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_a_n_8h_1a6f6668a04da1b06d98709be9a2426cc7" kindref="member">CAN_InitFxn</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_c_a_n___fxn_table_1a796e05c5237a6d06b01e25f4a11809e4" kindref="member">initFxn</ref>;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="442" refid="struct_c_a_n___fxn_table_1a7bac211c90709a0ca128372e83b42703" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_a_n_8h_1a51b71b8ad224e01470b5c9ee34b3f95e" kindref="member">CAN_OpenFxn</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_c_a_n___fxn_table_1a7bac211c90709a0ca128372e83b42703" kindref="member">openFxn</ref>;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="445" refid="struct_c_a_n___fxn_table_1afef5ad5234cdbc1b97af22b8aab212c0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_a_n_8h_1aee976ab0f943a5efa7d15e70906b11d1" kindref="member">CAN_ReadFxn</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_c_a_n___fxn_table_1afef5ad5234cdbc1b97af22b8aab212c0" kindref="member">readFxn</ref>;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="448" refid="struct_c_a_n___fxn_table_1a42228d7cce176d1c40b7253b9ee4b288" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_a_n_8h_1a37e1f018c6ee8289264e184cac3b6f32" kindref="member">CAN_WriteFxn</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_c_a_n___fxn_table_1a42228d7cce176d1c40b7253b9ee4b288" kindref="member">writeFxn</ref>;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="451" refid="struct_c_a_n___fxn_table_1a43b0a5ee70533e9aca2e97b3808b7977" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_c_a_n_8h_1a191c1d511cada1b1d82c634c6859666b" kindref="member">CAN_TxMsgFxn</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_c_a_n___fxn_table_1a43b0a5ee70533e9aca2e97b3808b7977" kindref="member">txMsgFxn</ref>;</highlight></codeline>
<codeline lineno="452"><highlight class="normal">}<sp/><ref refid="struct_c_a_n___fxn_table" kindref="compound">CAN_FxnTable</ref>;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="465" refid="struct_c_a_n___config__" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_c_a_n___config__" kindref="compound">CAN_Config_</ref><sp/>{</highlight></codeline>
<codeline lineno="467" refid="struct_c_a_n___config___1a339914abdab811170093b4a97af4141a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_c_a_n___fxn_table" kindref="compound">CAN_FxnTable</ref><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="struct_c_a_n___config___1a339914abdab811170093b4a97af4141a" kindref="member">fxnTablePtr</ref>;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="470" refid="struct_c_a_n___config___1a2a1e277bb740aae2ad9fd0b12e8de8d2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="struct_c_a_n___config___1a2a1e277bb740aae2ad9fd0b12e8de8d2" kindref="member">object</ref>;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="473" refid="struct_c_a_n___config___1a4e0dfe2b5d73723b4c0bd0c5f184aaa1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="struct_c_a_n___config___1a4e0dfe2b5d73723b4c0bd0c5f184aaa1" kindref="member">hwAttrs</ref>;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="476" refid="struct_c_a_n___config___1ad0ee57ec7e6779975ad2ff21ada5af60" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcan__frame" kindref="compound">CAN_Frame</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="struct_c_a_n___config___1ad0ee57ec7e6779975ad2ff21ada5af60" kindref="member">rxBufPtr</ref>;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="479" refid="struct_c_a_n___config___1a7271ad8eb420e66ba48321a570c55921" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcan__frame" kindref="compound">CAN_Frame</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="struct_c_a_n___config___1a7271ad8eb420e66ba48321a570c55921" kindref="member">txBufPtr</ref>;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="482" refid="struct_c_a_n___config___1a39cefc2cfd0ae191c47c244c9d6fb022" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_c_a_n___config___1a39cefc2cfd0ae191c47c244c9d6fb022" kindref="member">rxBufSize</ref>;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="485" refid="struct_c_a_n___config___1a81decd11a9182e003838a9514b562b6c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_c_a_n___config___1a81decd11a9182e003838a9514b562b6c" kindref="member">txBufSize</ref>;</highlight></codeline>
<codeline lineno="486"><highlight class="normal">}<sp/><ref refid="_c_a_n_8h_1a2adcb3cde9a6e999f9434e4689a917b9" kindref="member">CAN_Config</ref>;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_a_n_8h_1abfc2ccd7bffde7724a17ab6c7e69f5cf" kindref="member">CAN_close</ref>(CAN_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_a_n_8h_1ace7de72cc97ae2a35d63c3a4a4772a31" kindref="member">CAN_init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>int_fast16_t<sp/><ref refid="_c_a_n_8h_1a16c50386c49aa57fb2576a89ffa22a6b" kindref="member">CAN_control</ref>(CAN_Handle<sp/>handle,<sp/>uint_fast16_t<sp/>cmd,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>CAN_Handle<sp/><ref refid="_c_a_n_8h_1ac007ed113727f16540e8b8e5d4e88fe4" kindref="member">CAN_open</ref>(uint_least8_t<sp/>index,<sp/><ref refid="struct_c_a_n___params" kindref="compound">CAN_Params</ref><sp/>*params);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_a_n_8h_1a9a7a7042e4948d4e04b9cb5205c50acf" kindref="member">CAN_Params_init</ref>(<ref refid="struct_c_a_n___params" kindref="compound">CAN_Params</ref><sp/>*params);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>int_fast32_t<sp/><ref refid="_c_a_n_8h_1afe89a00428e47854c9881b4998f2464b" kindref="member">CAN_write</ref>(CAN_Handle<sp/>handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buffer,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>int_fast32_t<sp/><ref refid="_c_a_n_8h_1a24ffdf96e912ae6218ec3d3f52549551" kindref="member">CAN_read</ref>(CAN_Handle<sp/>handle,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buffer,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal">}</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ti_drivers_CAN__include<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="exports/tidrivers_msp432e4/source/ti/drivers/CAN.h"/>
  </compounddef>
</doxygen>
