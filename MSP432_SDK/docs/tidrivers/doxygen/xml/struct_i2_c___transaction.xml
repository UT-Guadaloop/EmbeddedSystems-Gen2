<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="struct_i2_c___transaction" kind="struct" language="C++" prot="public">
    <compoundname>I2C_Transaction</compoundname>
    <includes refid="_i2_c_8h" local="no">I2C.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="struct_i2_c___transaction_1aa3490c2af4b443a7a4ec13f57aec6d20" prot="public" static="no" mutable="no">
        <type>void *</type>
        <definition>void* I2C_Transaction::writeBuf</definition>
        <argsstring></argsstring>
        <name>writeBuf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pointer to a buffer of at least <ref refid="struct_i2_c___transaction_1a08959a9f098163d02d6002e73b3a4606" kindref="member">I2C_Transaction.writeCount</ref> bytes. If <ref refid="struct_i2_c___transaction_1a08959a9f098163d02d6002e73b3a4606" kindref="member">I2C_Transaction.writeCount</ref> is 0, this pointer is not used. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432e4/source/ti/drivers/I2C.h" line="418" column="1" bodyfile="exports/tidrivers_msp432e4/source/ti/drivers/I2C.h" bodystart="418" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_i2_c___transaction_1a08959a9f098163d02d6002e73b3a4606" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t I2C_Transaction::writeCount</definition>
        <argsstring></argsstring>
        <name>writeCount</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of bytes to write to the I2C slave device. A value of 0 indicates no data will be written to the slave device and only a read will occur. If this value is not 0, the driver will always perform the write transfer first. The data written to the I2C bus is preceded by the <ref refid="struct_i2_c___transaction_1a2e5c027c6f243f7169305f86bb2ab6e0" kindref="member">I2C_Transaction.slaveAddress</ref> with the write bit set. If <computeroutput>writeCount</computeroutput> bytes are successfully sent and acknowledged, the transfer will complete or perform a read<ndash/>depending on <ref refid="struct_i2_c___transaction_1a2085d4c943f0d8617365b7c427e6a0de" kindref="member">I2C_Transaction.readCount</ref>.</para><para><simplesect kind="note"><para>Both <ref refid="struct_i2_c___transaction_1a08959a9f098163d02d6002e73b3a4606" kindref="member">I2C_Transaction.writeCount</ref> and <ref refid="struct_i2_c___transaction_1a2085d4c943f0d8617365b7c427e6a0de" kindref="member">I2C_Transaction.readCount</ref> can not be 0. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432e4/source/ti/drivers/I2C.h" line="434" column="1" bodyfile="exports/tidrivers_msp432e4/source/ti/drivers/I2C.h" bodystart="434" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_i2_c___transaction_1a804b918d5cb08bb75a39866d0b89e01e" prot="public" static="no" mutable="no">
        <type>void *</type>
        <definition>void* I2C_Transaction::readBuf</definition>
        <argsstring></argsstring>
        <name>readBuf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pointer to a buffer of at least <ref refid="struct_i2_c___transaction_1a2085d4c943f0d8617365b7c427e6a0de" kindref="member">I2C_Transaction.readCount</ref> bytes. If <ref refid="struct_i2_c___transaction_1a2085d4c943f0d8617365b7c427e6a0de" kindref="member">I2C_Transaction.readCount</ref> is 0, this pointer is not used. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432e4/source/ti/drivers/I2C.h" line="440" column="1" bodyfile="exports/tidrivers_msp432e4/source/ti/drivers/I2C.h" bodystart="440" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_i2_c___transaction_1a2085d4c943f0d8617365b7c427e6a0de" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t I2C_Transaction::readCount</definition>
        <argsstring></argsstring>
        <name>readCount</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of bytes to read from the I2C slave device. A value of 0 indicates no data will be read and only a write will occur. If <ref refid="struct_i2_c___transaction_1a08959a9f098163d02d6002e73b3a4606" kindref="member">I2C_Transaction.writeCount</ref> is not 0, this driver will perform the write first, followed by the read. The data read from the bus is preceded by the <ref refid="struct_i2_c___transaction_1a2e5c027c6f243f7169305f86bb2ab6e0" kindref="member">I2C_Transaction.slaveAddress</ref> with the read bit set. After <computeroutput>readCount</computeroutput> bytes are successfully read, the transfer will complete.</para><para><simplesect kind="note"><para>Both <ref refid="struct_i2_c___transaction_1a08959a9f098163d02d6002e73b3a4606" kindref="member">I2C_Transaction.writeCount</ref> and <ref refid="struct_i2_c___transaction_1a2085d4c943f0d8617365b7c427e6a0de" kindref="member">I2C_Transaction.readCount</ref> can not be 0. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432e4/source/ti/drivers/I2C.h" line="454" column="1" bodyfile="exports/tidrivers_msp432e4/source/ti/drivers/I2C.h" bodystart="454" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_i2_c___transaction_1a29ec65addac2d4ef5d1235c2329e2fc1" prot="public" static="no" mutable="no">
        <type>void *</type>
        <definition>void* I2C_Transaction::arg</definition>
        <argsstring></argsstring>
        <name>arg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pointer to a custom argument to be passed to the <ref refid="_i2_c_8h_1adaa5c99b7c23a00bac52d15a2469764e" kindref="member">I2C_CallbackFxn</ref> function via the <ref refid="struct_i2_c___transaction" kindref="compound">I2C_Transaction</ref> structure.</para><para><simplesect kind="note"><para>The <ref refid="_i2_c_8h_1adaa5c99b7c23a00bac52d15a2469764e" kindref="member">I2C_CallbackFxn</ref> function is only called when operating in <ref refid="_i2_c_8h_1a39f3b9340fc4ee241b0d2da9b2841c26a129731a7edeb285f43a54b2cf9f5ac72" kindref="member">I2C_MODE_CALLBACK</ref>.</para></simplesect>
<simplesect kind="see"><para><ref refid="_i2_c_8h_1a39f3b9340fc4ee241b0d2da9b2841c26a129731a7edeb285f43a54b2cf9f5ac72" kindref="member">I2C_MODE_CALLBACK</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="_i2_c_8h_1adaa5c99b7c23a00bac52d15a2469764e" kindref="member">I2C_CallbackFxn</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432e4/source/ti/drivers/I2C.h" line="466" column="1" bodyfile="exports/tidrivers_msp432e4/source/ti/drivers/I2C.h" bodystart="466" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_i2_c___transaction_1a911f51c3c6fffcb962b225363fdbbb81" prot="public" static="no" mutable="no">
        <type>int_fast16_t</type>
        <definition>volatile int_fast16_t I2C_Transaction::status</definition>
        <argsstring></argsstring>
        <name>status</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>I2C status of the current transaction. The status may be used to determine why a transaction failed. Potential codes are: <itemizedlist>
<listitem><para><ref refid="group___i2_c___s_t_a_t_u_s_1gaa0bcf3acd26ac82bd8ff91daba2c78c4" kindref="member">I2C_STATUS_SUCCESS</ref> </para></listitem>
<listitem><para><ref refid="group___i2_c___s_t_a_t_u_s_1ga7323fe57c39c46d0da9910e17f5f0b06" kindref="member">I2C_STATUS_ERROR</ref> </para></listitem>
<listitem><para><ref refid="group___i2_c___s_t_a_t_u_s_1gacef5657ae83115da15f49dd76801638b" kindref="member">I2C_STATUS_TIMEOUT</ref> </para></listitem>
<listitem><para><ref refid="group___i2_c___s_t_a_t_u_s_1gae1ce91f866196f18abebfd6aead32cbe" kindref="member">I2C_STATUS_CLOCK_TIMEOUT</ref> </para></listitem>
<listitem><para><ref refid="group___i2_c___s_t_a_t_u_s_1ga75c95f62df35a6769b69904e6cd90181" kindref="member">I2C_STATUS_ADDR_NACK</ref> </para></listitem>
<listitem><para><ref refid="group___i2_c___s_t_a_t_u_s_1ga3773311442a356cd750e1cf34b85ed5a" kindref="member">I2C_STATUS_DATA_NACK</ref> </para></listitem>
<listitem><para><ref refid="group___i2_c___s_t_a_t_u_s_1gadb5718560335315df79d4abe7ddba317" kindref="member">I2C_STATUS_ARB_LOST</ref> </para></listitem>
<listitem><para><ref refid="group___i2_c___s_t_a_t_u_s_1ga4d4ff3732548047b7c09a1f34ab93d98" kindref="member">I2C_STATUS_INCOMPLETE</ref> </para></listitem>
<listitem><para><ref refid="group___i2_c___s_t_a_t_u_s_1gaf7455cb02ee12dfc513ceb28323b4b8d" kindref="member">I2C_STATUS_BUS_BUSY</ref> </para></listitem>
<listitem><para><ref refid="group___i2_c___s_t_a_t_u_s_1ga2cca884b9720ab2ca750ebfdb8614601" kindref="member">I2C_STATUS_CANCEL</ref> </para></listitem>
<listitem><para><ref refid="group___i2_c___s_t_a_t_u_s_1gad92f93f1f1c8ef8fc2be70bb8b0c7aa9" kindref="member">I2C_STATUS_INVALID_TRANS</ref></para></listitem>
</itemizedlist>
This status may also be used to determine if a transaction is queued (<ref refid="group___i2_c___s_t_a_t_u_s_1gaa63ec7e8376d0bfa4c6255a1f723e13f" kindref="member">I2C_STATUS_QUEUED</ref>) or in progress (<ref refid="group___i2_c___s_t_a_t_u_s_1ga4d4ff3732548047b7c09a1f34ab93d98" kindref="member">I2C_STATUS_INCOMPLETE</ref>). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432e4/source/ti/drivers/I2C.h" line="486" column="1" bodyfile="exports/tidrivers_msp432e4/source/ti/drivers/I2C.h" bodystart="486" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_i2_c___transaction_1a2e5c027c6f243f7169305f86bb2ab6e0" prot="public" static="no" mutable="no">
        <type>uint_least8_t</type>
        <definition>uint_least8_t I2C_Transaction::slaveAddress</definition>
        <argsstring></argsstring>
        <name>slaveAddress</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>I2C slave address used for the transaction. The slave address is the first byte transmitted during an I2C transfer. The read/write bit is automatically set based upon the <ref refid="struct_i2_c___transaction_1a08959a9f098163d02d6002e73b3a4606" kindref="member">I2C_Transaction.writeCount</ref> and <ref refid="struct_i2_c___transaction_1a2085d4c943f0d8617365b7c427e6a0de" kindref="member">I2C_Transaction.readCount</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432e4/source/ti/drivers/I2C.h" line="494" column="1" bodyfile="exports/tidrivers_msp432e4/source/ti/drivers/I2C.h" bodystart="494" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="struct_i2_c___transaction_1a21755edd4d999d6041d303e269596371" prot="private" static="no" mutable="no">
        <type>void *</type>
        <definition>void* I2C_Transaction::nextPtr</definition>
        <argsstring></argsstring>
        <name>nextPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is reserved for use by the driver and must never be modified by the application. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_msp432e4/source/ti/drivers/I2C.h" line="500" column="1" bodyfile="exports/tidrivers_msp432e4/source/ti/drivers/I2C.h" bodystart="500" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Defines a transaction to be used with <ref refid="_i2_c_8h_1ac5d827b67fe77d7d179026941cc069d7" kindref="member">I2C_transfer()</ref> or <ref refid="_i2_c_8h_1aaee4f0689acbe5f0596e35b18402abf3" kindref="member">I2C_transferTimeout()</ref> </para>    </briefdescription>
    <detaileddescription>
<para>After a call to <ref refid="_i2_c_8h_1ac5d827b67fe77d7d179026941cc069d7" kindref="member">I2C_transfer()</ref>, the <ref refid="struct_i2_c___transaction_1a911f51c3c6fffcb962b225363fdbbb81" kindref="member">I2C_Transaction.status</ref> reflects the current transfer status.</para><para><simplesect kind="see"><para><ref refid="_i2_c_8h_1ac5d827b67fe77d7d179026941cc069d7" kindref="member">I2C_transfer()</ref>, <ref refid="_i2_c_8h_1aaee4f0689acbe5f0596e35b18402abf3" kindref="member">I2C_transferTimeout()</ref> </para></simplesect>
</para>    </detaileddescription>
    <location file="exports/tidrivers_msp432e4/source/ti/drivers/I2C.h" line="413" column="1" bodyfile="exports/tidrivers_msp432e4/source/ti/drivers/I2C.h" bodystart="413" bodyend="501"/>
    <listofallmembers>
      <member refid="struct_i2_c___transaction_1a29ec65addac2d4ef5d1235c2329e2fc1" prot="public" virt="non-virtual"><scope>I2C_Transaction</scope><name>arg</name></member>
      <member refid="struct_i2_c___transaction_1a21755edd4d999d6041d303e269596371" prot="private" virt="non-virtual"><scope>I2C_Transaction</scope><name>nextPtr</name></member>
      <member refid="struct_i2_c___transaction_1a804b918d5cb08bb75a39866d0b89e01e" prot="public" virt="non-virtual"><scope>I2C_Transaction</scope><name>readBuf</name></member>
      <member refid="struct_i2_c___transaction_1a2085d4c943f0d8617365b7c427e6a0de" prot="public" virt="non-virtual"><scope>I2C_Transaction</scope><name>readCount</name></member>
      <member refid="struct_i2_c___transaction_1a2e5c027c6f243f7169305f86bb2ab6e0" prot="public" virt="non-virtual"><scope>I2C_Transaction</scope><name>slaveAddress</name></member>
      <member refid="struct_i2_c___transaction_1a911f51c3c6fffcb962b225363fdbbb81" prot="public" virt="non-virtual"><scope>I2C_Transaction</scope><name>status</name></member>
      <member refid="struct_i2_c___transaction_1aa3490c2af4b443a7a4ec13f57aec6d20" prot="public" virt="non-virtual"><scope>I2C_Transaction</scope><name>writeBuf</name></member>
      <member refid="struct_i2_c___transaction_1a08959a9f098163d02d6002e73b3a4606" prot="public" virt="non-virtual"><scope>I2C_Transaction</scope><name>writeCount</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
